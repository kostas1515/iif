{"env_info": "sys.platform: linux\nPython: 3.8.12 (default, Oct 12 2021, 13:02:29) [GCC 7.3.0]\nCUDA available: True\nGPU 0,1,2,3: Tesla V100-SXM2-32GB\nCUDA_HOME: /opt/software/builder/developers/compilers/cuda/10.2.89/1/default\nNVCC: Cuda compilation tools, release 10.2, V10.2.89\nGCC: gcc (GCC) 8.4.0\nPyTorch: 1.7.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - CPU capability usage: NO AVX\n  - CUDA Runtime 10.2\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75\n  - CuDNN 7.6.5\n  - Magma 2.5.4\n  - Build settings: BLAS=OpenBLAS, BUILD_TYPE=Release, CXX_FLAGS=-fvisibility-inlines-hidden -fmessage-length=0 -mcpu=power8 -mtune=power8 -mpower8-fusion -mpower8-vector -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O3 -pipe -I/home/florin/anaconda3/envs/open-ce/conda-bld/pytorch-base_1614672317903/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/include -fdebug-prefix-map=/home/florin/anaconda3/envs/open-ce/conda-bld/pytorch-base_1614672317903/work=/usr/local/src/conda/pytorch-base-1.7.1 -fdebug-prefix-map=/home/florin/anaconda3/envs/open-ce/conda-bld/pytorch-base_1614672317903/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place=/usr/local/src/conda-prefix -D__STDC_FORMAT_MACROS -I/home/florin/anaconda3/envs/open-ce/conda-bld/pytorch-base_1614672317903/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/include -I/usr/local/cuda-10.2//include -I/home/florin/anaconda3/envs/open-ce/conda-bld/pytorch-base_1614672317903/_build_env/include -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -DNDEBUG -DUSE_VULKAN_WRAPPER -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, USE_CUDA=1, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=0, USE_OPENMP=1, \n\nTorchVision: 0.8.2\nOpenCV: 4.5.5\nMMCV: 1.3.8\nMMCV Compiler: GCC 8.4\nMMCV CUDA Compiler: 10.2\nMMDetection: 2.16.0+e68bc71", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardFASARoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCFASABBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1203,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='FasaIIFLoss',\n                use_sigmoid=False,\n                loss_weight=1.0,\n                variant='base10_obj'),\n            cls_predictor_cfg=dict(type='NormedLinear', tempearture=8),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0),\n            fasa_cfg=dict(\n                decay_ratio=0.1,\n                loss_aug_weight=0.1,\n                instance_prob_power=1.0,\n                instance_prob_scale=1.0,\n                dynamic_up=1.1,\n                dynamic_down=0.9)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1203,\n            predictor_cfg=dict(type='NormedConv2d', tempearture=20),\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.0001,\n            nms=dict(type='nms', iou_threshold=0.3),\n            max_per_img=300,\n            mask_thr_binary=0.5)))\ndataset_type = 'LVISV1Dataset'\ndata_root = '../../../../object_detection/datasets/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(\n        type='Resize',\n        img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                   (1333, 768), (1333, 800)],\n        multiscale_mode='value',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=4,\n    train=dict(\n        type='ClassBalancedDataset',\n        oversample_thr=0.001,\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(\n                type='Resize',\n                img_scale=[(1333, 640), (1333, 672), (1333, 704), (1333, 736),\n                           (1333, 768), (1333, 800)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ],\n        dataset=dict(\n            type='LVISV1Dataset',\n            ann_file=\n            '../../../../object_detection/datasets/coco/annotations/lvis_v1_train.json',\n            img_prefix='../../../../object_detection/datasets/coco/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n                dict(\n                    type='Resize',\n                    img_scale=[(1333, 640), (1333, 672), (1333, 704),\n                               (1333, 736), (1333, 768), (1333, 800)],\n                    multiscale_mode='value',\n                    keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(\n                    type='Collect',\n                    keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n            ])),\n    val=dict(\n        type='LVISV1Dataset',\n        ann_file=\n        '../../../../object_detection/datasets/coco/annotations/lvis_v1_val.json',\n        img_prefix='../../../../object_detection/datasets/coco/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='LVISV1Dataset',\n        ann_file=\n        '../../../../object_detection/datasets/coco/annotations/lvis_v1_val.json',\n        img_prefix='../../../../object_detection/datasets/coco/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'], interval=24)\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedDynamicRunner', max_epochs=24)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(\n    interval=50,\n    hooks=[dict(type='TextLoggerHook'),\n           dict(type='TensorboardLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1), ('val', 1)]\nwork_dir = 'experiments/fasa_iof_base10_r50_rfs_cos_norm_4x4_2x'\ngpu_ids = range(0, 4)\n", "seed": null, "exp_name": "fasa_iof_base10_r50_rfs_cos_norm_4x4_2x.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 7936, "data_time": 2.75126, "loss_rpn_cls": 0.54791, "loss_rpn_bbox": 0.1316, "loss_bbox": 0.15452, "loss_cls": 2.20842, "acc_classes": 85.25854, "loss_mask": 0.83547, "loss": 3.87792, "time": 3.43644}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 7936, "data_time": 0.05216, "loss_rpn_cls": 0.30342, "loss_rpn_bbox": 0.12183, "loss_bbox": 0.23099, "loss_cls": 0.66406, "acc_classes": 93.23657, "loss_mask": 0.77826, "loss": 2.09856, "time": 0.72706}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 8122, "data_time": 0.05421, "loss_rpn_cls": 0.26396, "loss_rpn_bbox": 0.11831, "loss_bbox": 0.20379, "loss_cls": 0.62997, "acc_classes": 93.40015, "loss_mask": 0.73282, "loss": 1.94886, "time": 0.70596}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 8578, "data_time": 0.05865, "loss_rpn_cls": 0.25139, "loss_rpn_bbox": 0.12607, "loss_bbox": 0.20612, "loss_cls": 0.65762, "acc_classes": 93.01929, "loss_mask": 0.71112, "loss": 1.95232, "time": 0.76227}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 8578, "data_time": 0.05368, "loss_rpn_cls": 0.24224, "loss_rpn_bbox": 0.12815, "loss_bbox": 0.24798, "loss_cls": 0.74537, "acc_classes": 91.9187, "loss_mask": 0.70074, "loss": 2.06448, "time": 0.72972}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 0.01197, "memory": 8578, "data_time": 0.05781, "loss_rpn_cls": 0.21226, "loss_rpn_bbox": 0.12033, "loss_bbox": 0.27902, "loss_cls": 0.79751, "acc_classes": 91.25952, "loss_mask": 0.69866, "loss": 2.10778, "time": 0.72843}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 0.01397, "memory": 8578, "data_time": 0.05004, "loss_rpn_cls": 0.19826, "loss_rpn_bbox": 0.11222, "loss_bbox": 0.31411, "loss_cls": 0.86071, "acc_classes": 90.60205, "loss_mask": 0.69341, "loss": 2.17871, "time": 0.73707}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 0.01596, "memory": 8750, "data_time": 0.05147, "loss_rpn_cls": 0.18445, "loss_rpn_bbox": 0.10858, "loss_bbox": 0.31969, "loss_cls": 0.84291, "acc_classes": 90.47754, "loss_mask": 0.67577, "loss": 2.13141, "time": 0.71987}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 0.01796, "memory": 9055, "data_time": 0.05404, "loss_rpn_cls": 0.17227, "loss_rpn_bbox": 0.10379, "loss_bbox": 0.34887, "loss_cls": 0.86704, "acc_classes": 89.79297, "loss_mask": 0.64067, "loss": 2.13263, "time": 0.72245}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.01996, "memory": 9055, "data_time": 0.06157, "loss_rpn_cls": 0.1752, "loss_rpn_bbox": 0.10617, "loss_bbox": 0.35577, "loss_cls": 0.86628, "acc_classes": 89.34302, "loss_mask": 0.61072, "loss": 2.11413, "time": 0.75025}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.02, "memory": 9055, "data_time": 0.0615, "loss_rpn_cls": 0.16637, "loss_rpn_bbox": 0.10719, "loss_bbox": 0.3542, "loss_cls": 0.82604, "acc_classes": 89.58545, "loss_mask": 0.58584, "loss": 2.03964, "time": 0.72711}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.02, "memory": 9055, "data_time": 0.05342, "loss_rpn_cls": 0.15582, "loss_rpn_bbox": 0.1, "loss_bbox": 0.36801, "loss_cls": 0.80908, "acc_classes": 89.21069, "loss_mask": 0.5498, "loss": 1.9827, "time": 0.72596}
